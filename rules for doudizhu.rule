<config>
	cards = 2;
	player_number = 3;
</config>

<var>
	score = 0;
	host = 0;
</var>

<card>
list:..|.. JB JS .2 .1 .K .Q　.J .0 .9 .8 .7 .6 .5 .4 .3
</card>

<mode>
bomb:(.a){4+}::{
	if($1.size>$2.size)
		return 1;
	else if($1.size<$2.size)
		return -1;
	else if($1(1)>$2(1))
		return 1;
	else if($1(1)<$2(1))
		return -1;
	else
		return 0;			
}

straight:(.a#){5+}:bomb:{
	if($1.size!=$2.size)
		return 0;
	if($1(3)>$2(3))
		return 1;
	else if($1(3)<$2(3))
		return -1;
	else
		return 0;
}

straight_3:((.a#)(.a){2}){2+}:bomb:{
	if($1.size!=$2.size)
		return 0;
	if($1(4)>$2(4))
		return 1;
	else if($1(4)<$2(4))
		return -1;
	else
		return 0;
}

straight_3_1:((.a#)(.a){2}){2+:a}(.b$){a}:bomb:{
	if($1.size!=$2.size)
		return 0;
	if($1(4)>$2(4))
		return 1;
	else if($1(4)<$2(4))
		return -1;
	else
		return 0;
}

straight_3_2:((.a#)(.a){2}){2+:a}((.b$)(.b)){a}:bomb:{
	if($1.size!=$2.size)
		return 0;
	if($1(4)>$2(4))
		return 1;
	else if($1(4)<$2(4))
		return -1;
	else
		return 0;
}

straight_2:((.a#)(.a)){3+}:bomb:{
	if($1.size!=$2.size)
		return 0;
	if($1(5)>$2(5))
		return 1;
	else if($1(5)<$2(5))
		return -1;
	else
		return 0;
}

common_3:(.a){3}:bomb:{
	if($1(1)>S2(1))
		return 1;
	else if($1(1)<$2(1))
		return -1;
	else
		return 0;
}

common_3_1:(.a){3}(.b):bomb:{
	if($1(1)>S2(1))
		return 1;
	else if($1(1)<$2(1))
		return -1;
	else
		return 0;
}

common_3_2:(.a){3}(.b){2}:bomb:{
	if($1(1)>S2(1))
		return 1;
	else if($1(1)<$2(1))
		return -1;
	else
		return 0;
}

pair:(.a){2}:bomb:{
	if($1(1)>S2(1))
		return 1;
	else if($1(1)<$2(1))
		return -1;
	else
		return 0;
}

single:(..):bomb:{
	if($1(1)>S2(1))
		return 1;
	else if($1(1)<$2(1))
		return -1;
	else
		return 0;
}
</mode>

<func>
</func>

<body>
//发牌
int num = 1;
while (get_cardnum(player[0])>3){
	deliver(player[0], player[num], topcard(player[0]));
	num = (num=1） % (players + 1);
	if (num==0) num = 1;
}

//叫牌
int[] y_num = {0, 1, 2, 3};
int host, tmp, point;
host = 0;
int tmp;
post_yield(player[1], y_num);
tmp = get_yield(player[1]);
if (tmp1!=0){
	host = 1 ;
	point = tmp;
}
update(y_num, tmp);
post_yield(player[2], y_num);
tmp = get_yield(player[2]);
if (tmp!=0){
	host = 2;
	point = tmp;
}	
update(y_num, tmp);
post_yield(player[3], y_num);
tmp = get_yield(player[3]);
if (tmp!=0){
	host = 3;
	point = tmp;
}
if (host==0) begin;
while (get_cardnum(player[0])!=0){
	deliver(player[0], player[host], topcard(player[0]));
}
	
//出牌
int current_player, pre_owner;
current_player = host;
card[] pre_card = NONE;
pre_owner = 0;
card[] tmpcard;
while (get_cardnum(player[1])*get_cardnum(player[2])* get_cardnum_player[3]!=0){
	enable(current_player);
	tmpcard = get_card(current_player, pre_card);
	if (tmpcard!=NONE){
		deliver(player[current_player], player[0], tmpcard);
		pre_card = tmpcard;
		pre_owner = current_player;
	}
	disable(current_player);
	current_player = (current_player+1) % 4;
	if (current_player == 0) current_player = 1;
	if (pre_owner==current_player) pre_card = NONE;
}
		
//结束
end();
</body>

<end>
if (get_cardnum(player[host]==0)){
	add_score(player[host], score * 2);
	for(int i=1;i<=players;i++){
		if(i!=host)
			showmessage(player[i],"Sorry you have failed!>.<");
		else
			showmessage(players[i],"Haha,you are the winner ^0^");
	}
}
else{
	add_score(player[1], score);
	add_score(player[2], score);
	add_score(player[3], score);
	add_score(player[host],-score);
	for(int i=1;i<=players;i++){
		if(i==host)
			showmessage(player[i],"Sorry you have failed!>.<");
		else
			showmessage(players[i],"Haha,you are the winner ^0^");
	}
}
</end>